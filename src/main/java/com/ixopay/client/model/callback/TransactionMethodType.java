//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.05.21 at 03:44:38 PM CEST 
//


package com.ixopay.client.model.callback;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for transactionMethodType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="transactionMethodType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="DEBIT"/>
 *     &lt;enumeration value="CAPTURE"/>
 *     &lt;enumeration value="DEREGISTER"/>
 *     &lt;enumeration value="PREAUTHORIZE"/>
 *     &lt;enumeration value="REFUND"/>
 *     &lt;enumeration value="REGISTER"/>
 *     &lt;enumeration value="VOID"/>
 *     &lt;enumeration value="CHARGEBACK"/>
 *     &lt;enumeration value="CHARGEBACK-REVERSAL"/>
 *     &lt;enumeration value="PAYOUT"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "transactionMethodType")
@XmlEnum
public enum TransactionMethodType {

    DEBIT("DEBIT"),
    CAPTURE("CAPTURE"),
    DEREGISTER("DEREGISTER"),
    PREAUTHORIZE("PREAUTHORIZE"),
    REFUND("REFUND"),
    REGISTER("REGISTER"),
    VOID("VOID"),
    CHARGEBACK("CHARGEBACK"),
    @XmlEnumValue("CHARGEBACK-REVERSAL")
    CHARGEBACK_REVERSAL("CHARGEBACK-REVERSAL"),
    PAYOUT("PAYOUT");
    private final String value;

    TransactionMethodType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TransactionMethodType fromValue(String v) {
        for (TransactionMethodType c: TransactionMethodType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
